# This file is autogenerated by maturin v1.1.0
# To update, run
#
#    maturin generate-ci github
#
name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:
# Spend CI time only on latest ref: https://github.com/jonhoo/rust-ci-conf/pull/5
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
permissions:
  contents: read

env:
  PYTHON_LATEST: "3.11"

jobs:
  pre-flight:
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v4"
        with:
          submodules: 'recursive' # Fetch Git submodules recursively
    # Initialize and update submodules (optional, if submodules were not initialized during checkout)
      - name: Update submodules
        run: git submodule update --init --recursive
      - uses: "actions/setup-python@v4"
        with:
          python-version: ${{env.PYTHON_LATEST}}
          cache: "pip"
      - name: "Install dependencies"
        run: |
          set -xe
          python -VV
          python -m site
          python -m pip install --upgrade pip
          python -m pip install wheel readfish==2024.2.0
      - uses: "dtolnay/rust-toolchain@stable"

      - id: cache-rust
        name: cache rust
        uses: Swatinem/rust-cache@v2
        with:
          key: pre-commit
      - uses: "pre-commit/action@v3.0.0"

  msrv:
    runs-on: "ubuntu-latest"
    needs: pre-flight
    strategy:
      matrix:
        msrv: ["1.66.1"]
    name: "ubuntu / ${{ matrix.msrv }}"
    steps:
      - uses: "actions/checkout@v4"
        with:
          submodules: 'recursive' # Fetch Git submodules recursively

    # Initialize and update submodules (optional, if submodules were not initialized during checkout)
      - name: Update submodules
        run: git submodule update --init --recursive
      - uses: "dtolnay/rust-toolchain@master"
        with:
          toolchain: "${{ matrix.msrv }}"
      - name: cache rust
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.msrv }}

      - name: "cargo +${{ matrix.msrv }} check"
        run: "cargo check"


  os-check:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} / stable
    needs: pre-flight
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest]
    steps:
      # if your project needs OpenSSL, uncommment this to fix Windows builds.
      # it's commented out by default as tthe install command takes 5-10m.
      # - run: echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
      #   if: runner.os == 'Windows'
      # - run: vcpkg install openssl:x64-windows-static-md
      #   if: runner.os == 'Windows'
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: cache rust
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-v1
      - name: cargo test
        run: cargo test --locked --all-features --all-targets

  python-test:
    name: "Test Python ${{ matrix.python-version }}"
    runs-on: "ubuntu-latest"
    needs: pre-flight
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - uses: "actions/checkout@v4"
        with:
          submodules: 'recursive' # Fetch Git submodules recursively

    # Initialize and update submodules (optional, if submodules were not initialized during checkout)
      - name: Update submodules
        run: git submodule update --init --recursive
      - uses: "actions/setup-python@v4"
        with:
          python-version: "${{ matrix.python-version }}"
          cache: "pip"
      - uses: "dtolnay/rust-toolchain@stable"
      - name: cache rust
        uses: Swatinem/rust-cache@v2
        with:
          key: python-test-v1
      - name: "Install dependencies"
        run: |
          set -xe
          python -VV
          python -m site
          python -m pip install --upgrade pip
          python -m pip install readfish==2024.2.0
          python -m pip install .
      - name: "Run pytest for ${{ matrix.python-version }}"
        run: "python -m pytest -sv"
  # buildy time
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, x86, aarch64, armv7]
    needs: python-test
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: "pip"
      - name: "Install dependencies"
        run: |
          set -xe
          python -VV
          python -m site
          python -m pip install --upgrade pip
          python -m pip install readfish==2024.2.0
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist -i 3.8 3.9 3.10 3.11 3.12 pypy3.8 pypy3.9 pypy3.10
          sccache: 'true'
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  # windows:
  #   runs-on: windows-latest
  #   strategy:
  #     matrix:
  #       target: [x64, x86]
  #   needs: python-test

  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.10'
  #         architecture: ${{ matrix.target }}
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.target }}
  #         args: --release --out dist -i 3.8 3.9 3.10 3.11
  #         sccache: 'true'
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: wheels
  #         path: dist

  macos:
    runs-on: macos-13
    needs: python-test

    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: "pip"
      - name: "Install dependencies"
        run: |
          set -xe
          python -VV
          python -m site
          python -m pip install --upgrade pip
          python -m pip install git+https://${{ secrets.USERNAME }}:${{ secrets.READFISH_DEV_PAT }}@github.com/looselab/readfish_dev.git@refactor
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist -i 3.8 3.9 3.10 3.11 3.12 pypy3.8 pypy3.9 pypy3.10
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [linux, macos]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --skip-existing *
